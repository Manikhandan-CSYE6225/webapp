name: Build and Share AMI

on:
  push:
    branches:
      - feature/binding-policies-gcp

jobs:
  integration-tests:
#    if: github.repository == 'Manikhandan-CSYE6225/webapp'
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD_TEST }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME_TEST }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Tests
        env:
          DB_USERNAME_TEST: ${{ secrets.DB_USERNAME_TEST }}
          DB_PASSWORD_TEST: ${{ secrets.DB_PASSWORD_TEST }}
          DB_NAME_TEST: ${{ secrets.DB_NAME_TEST }}
          DB_HOST_TEST: ${{ secrets.DB_HOST_TEST }}
          DB_DIALECT_TEST: ${{ secrets.DB_DIALECT_TEST }}
        run: npm run test

  build-ami:
#    if: github.repository == 'Manikhandan-CSYE6225/webapp'
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build application artifact
        id: build
        run: |
          npm run zip

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Build AMI with Packer
        run: |
          packer init ./packer
          packer build -var "aws_region=${{ secrets.AWS_REGION }}" -var "ami_source=ami-04b4f1a9cf54c11d0" -var "ami_instance=t2.micro" -var "ami_prefix=webapp-aws-ubuntu-nodejs" -var "db_user=${{ secrets.DB_USERNAME_TEST }}" -var "db_password=${{ secrets.DB_PASSWORD_TEST }}" -var "db_name=${{ secrets.DB_NAME_TEST }}" -var "db_host=${{ secrets.DB_HOST_TEST }}" -var "port=${{ secrets.PORT }}" -var "dialect=${{ secrets.DB_DIALECT_TEST }}" -var "ami_users=${{ secrets.AMI_USERS }}" -var "gcp_project_id=${{ secrets.GCP_DEV_PROJECTID }}" -var "gcp_zone=${{ secrets.GCP_ZONE }}" -var "gcp_image_name=webapp-ubuntu-nodejs" -var "artifact_path=/home/runner/work/webapp-csye6225/webapp-csye6225/webapp.zip" ./packer

      - name: Share Image with Another GCP Project
        run: |
          IMAGE_NAME=$(gcloud compute images list --filter="name~'webapp-ubuntu-nodejs-*'" --format="value(name)" | head -n1)
          gcloud compute images add-iam-policy-binding $IMAGE_NAME \
          --member="serviceAccount:${{ secrets.GCP_DEMO_SERVICE_ACC }}@${{ secrets.GCP_DEMO_PROJECT_ID }}.iam.gserviceaccount.com" \
          --role="roles/compute.imageUser"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
         project_id: ${{ secrets.GCP_DEMO_PROJECT_ID }}
         credentials_json: ${{ secrets.GCP_DEMO_SA_KEY }}

      - name: Create Image from target GCP Project
        run: |
           gcloud compute images create $IMAGE_NAME \
           --source-image=$IMAGE_NAME \
           --source-image-project=${{ secrets.GCP_PROJECT_ID }} \
           --project=${{ secrets.GCP_DEMO_PROJECT_ID }}
          
