name: Build and Share AMI

on:
  push:

jobs:
  integration-tests:
#    if: github.event.pull_request.merged == true || github.repository == 'Manikhandan-CSYE6225/webapp'
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD_TEST }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME_TEST }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Tests
        env:
          DB_USERNAME_TEST: ${{ secrets.DB_USERNAME_TEST }}
          DB_PASSWORD_TEST: ${{ secrets.DB_PASSWORD_TEST }}
          DB_NAME_TEST: ${{ secrets.DB_NAME_TEST }}
          DB_HOST_TEST: ${{ secrets.DB_HOST_TEST }}
          DB_DIALECT_TEST: ${{ secrets.DB_DIALECT_TEST }}
        run: npm run test

  build-ami:
#    if: github.event.pull_request.merged == true || github.repository == 'Manikhandan-CSYE6225/webapp'
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build application artifact
        id: build
        run: |
          npm run zip

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build AMI with Packer
        run: |
          packer init ./packer
          packer build -var "aws_region=${{ secrets.AWS_REGION }}" -var "ami_source=ami-04b4f1a9cf54c11d0" -var "ami_instance=t2.micro" -var "ami_prefix=webapp-aws-ubuntu-nodejs" -var "ami_users=${{ secrets.AMI_USERS }}" -var "artifact_path=/home/runner/work/webapp-csye6225/webapp-csye6225/webapp-csye6225.zip" ./packer

      - name: Extract AMI ID
        id: extract_ami
        run: |
          AMI_ID=$(grep -o 'ami-[0-9a-f]\+' packer_output.txt | tail -1)
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
          echo "Created AMI: $AMI_ID"

  update-launch-template:
#    if: github.event.pull_request.merged == true || github.repository == 'Manikhandan-CSYE6225/webapp'
    needs: build-ami
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create new Launch Template version
        id: create_lt_version
        run: |
          # Get the latest Launch Template version
          LATEST_VERSION=$(aws ec2 describe-launch-templates \
            --launch-template-name ${{ secrets.LAUNCH_TEMPLATE_NAME }} \
            --query 'LaunchTemplates[0].LatestVersionNumber' \
            --output text)
          
          echo "Current latest version: $LATEST_VERSION"
          
          # Create a new Launch Template version with the new AMI
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name ${{ secrets.LAUNCH_TEMPLATE_NAME }} \
            --source-version $LATEST_VERSION \
            --version-description "Update AMI to ${{ needs.build-ami.outputs.ami_id }}" \
            --launch-template-data "{\"ImageId\":\"${{ needs.build-ami.outputs.ami_id }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          
          echo "Created new Launch Template version: $NEW_VERSION"
          
          # Set the new version as default
          aws ec2 modify-launch-template \
            --launch-template-name ${{ secrets.LAUNCH_TEMPLATE_NAME }} \
            --default-version $NEW_VERSION
          
          echo "Set version $NEW_VERSION as default"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  refresh-asg:
#    if: github.event.pull_request.merged == true || github.repository == 'Manikhandan-CSYE6225/webapp'
    needs: [build-ami, update-launch-template]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start instance refresh and wait for completion
        run: |
          # Start instance refresh
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
            --preferences "MinHealthyPercentage=90" \
            --query 'InstanceRefreshId' \
            --output text)
          
          echo "Started instance refresh with ID: $REFRESH_ID"
          
          # Check refresh status and wait for completion
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ secrets.ASG_NAME }} \
              --instance-refresh-ids $REFRESH_ID \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
          
            echo "Current refresh status: $STATUS"
          
            if [ "$STATUS" == "Successful" ]; then
              echo "Instance refresh completed successfully!"
              break
            elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Cancelled" ]; then
              echo "Instance refresh $STATUS"
              exit 1
            else
              echo "Waiting for instance refresh to complete... (Current status: $STATUS)"
              sleep 30
            fi
          done

    
